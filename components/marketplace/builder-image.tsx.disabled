"use client";

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { cn } from '@/lib/utils';

interface BuilderImageProps {
  src?: string | null;
  alt: string;
  fallbackText?: string;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

/**
 * BuilderImage component for displaying builder profile images with fallback
 */
export function BuilderImage({
  src,
  alt,
  fallbackText,
  size = 'md',
  className = '',
}: BuilderImageProps) {
  const [shouldShowImage, setShouldShowImage] = useState<boolean>(false);
  const [imageSrc, setImageSrc] = useState<string>('/images/default-avatar.svg');
  
  useEffect(() => {
    // Logic to determine if we should show the image
    if (src) {
      // Set the image source - use the provided src if available
      setImageSrc(src);
      setShouldShowImage(true);
    } else {
      // Use default avatar
      setImageSrc('/images/default-avatar.svg');
      setShouldShowImage(true);
    }
  }, [src]);

  // Size classes mapping
  const sizeMap = {
    sm: 'h-10 w-10',
    md: 'h-16 w-16',
    lg: 'h-24 w-24',
  };

  // Fallback text (first letter of alt or fallbackText)
  const letter = fallbackText ? fallbackText.charAt(0).toUpperCase() : alt.charAt(0).toUpperCase();

  return (
    <div className={cn(
      `relative rounded-full overflow-hidden flex items-center justify-center bg-slate-100 dark:bg-slate-800 ${sizeMap[size]}`,
      className
    )}>
      {shouldShowImage ? (
        <Image
          src={imageSrc}
          alt={alt}
          fill
          className="object-cover"
          onError={() => {
            setShouldShowImage(false);
            setImageSrc('/images/default-avatar.svg');
          }}
        />
      ) : (
        <span className="font-semibold text-lg">{letter}</span>
      )}
    </div>
  );
}