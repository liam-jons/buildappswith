#!/usr/bin/env node

/**
 * Datadog Metrics Verification Script
 * 
 * This script verifies that Datadog metrics are being properly collected by:
 * 1. Running a test with Datadog reporting enabled
 * 2. Checking that the metrics were sent to Datadog
 * 3. Verifying the metrics appear in the Datadog metrics explorer
 * 
 * Usage: node scripts/verify-datadog-metrics.js
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const dotenv = require('dotenv');
const http = require('https');

// Configuration
const PROJECT_ROOT = path.resolve(__dirname, '..');
const TEST_RESULTS_DIR = path.join(PROJECT_ROOT, 'test-results');
const METRIC_PREFIX = 'buildappswith.tests';
const TEST_TIMEOUT = 60000; // 60 seconds
const DATADOG_API_WAIT = 5000; // 5 seconds to wait for metrics to appear in Datadog

// Load environment variables
const mergedEnv = {};
function loadAndMergeEnv(envPath) {
  if (fs.existsSync(envPath)) {
    console.log(`Loading environment from: ${path.relative(PROJECT_ROOT, envPath)}`);
    const envConfig = dotenv.parse(fs.readFileSync(envPath));
    for (const key in envConfig) {
      mergedEnv[key] = envConfig[key];
    }
  }
}

// Load environment variables in order of precedence
loadAndMergeEnv(path.join(PROJECT_ROOT, '.env'));
const NODE_ENV = process.env.NODE_ENV || 'development';
loadAndMergeEnv(path.join(PROJECT_ROOT, `.env.${NODE_ENV}`));
loadAndMergeEnv(path.join(PROJECT_ROOT, '.env.local'));
loadAndMergeEnv(path.join(PROJECT_ROOT, `.env.${NODE_ENV}.local`));
loadAndMergeEnv(path.join(PROJECT_ROOT, '.env.production.local'));

// Now add all the merged variables to process.env
for (const key in mergedEnv) {
  process.env[key] = mergedEnv[key];
}

// Environment variables
const DATADOG_API_KEY = process.env.DATADOG_API_KEY;
const DATADOG_APP_KEY = process.env.DATADOG_APP_KEY;

// Verify environment variables
if (!DATADOG_API_KEY || !DATADOG_APP_KEY) {
  console.error('❌ Error: DATADOG_API_KEY and DATADOG_APP_KEY must be set in environment variables');
  console.error('Please add these variables to your .env.local file and try again');
  process.exit(1);
}

/**
 * Main verification function
 */
async function verifyDatadogMetrics() {
  console.log('🔍 Verifying Datadog metrics collection...');
  
  // 1. Check Datadog agent
  checkDatadogAgent();
  
  // 2. Run a small test to generate metrics
  runTest();
  
  // 3. Check if metric file was generated
  checkMetricFile();
  
  // 4. Query Datadog API to verify metrics were received
  await queryDatadogMetrics();
  
  console.log('✅ Verification completed successfully!');
}

/**
 * Check if Datadog agent is installed and running
 */
function checkDatadogAgent() {
  console.log('🔍 Checking Datadog agent...');
  
  try {
    // Check if Datadog agent is running
    const agentStatus = execSync('datadog-agent status 2>/dev/null || echo "Agent not running"', { encoding: 'utf8' });
    
    if (agentStatus.includes('Agent not running')) {
      console.error('❌ Error: Datadog agent not detected or not running');
      console.error('Please ensure the Datadog agent is installed and running:');
      console.error('- For Mac: brew install datadog-agent');
      console.error('- For Linux: Follow instructions at https://docs.datadoghq.com/agent/');
      process.exit(1);
    } else {
      console.log('✅ Datadog agent is running');
    }
  } catch (error) {
    console.error('❌ Error checking Datadog agent:', error.message);
    process.exit(1);
  }
}

/**
 * Run a small test to generate metrics
 */
function runTest() {
  console.log('🧪 Running a test to generate metrics...');
  
  try {
    // Create a simple test directory if it doesn't exist
    const testDir = path.join(PROJECT_ROOT, '__tests__', 'verification');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }
    
    // Create a simple test file if it doesn't exist
    const testFilePath = path.join(testDir, 'datadog-verification.test.js');
    if (!fs.existsSync(testFilePath)) {
      const testContent = `
/**
 * Datadog metrics verification test
 * This file is automatically generated by the verification script
 */

describe('Datadog Verification', () => {
  it('should pass and generate metrics', () => {
    expect(true).toBe(true);
  });
  
  it('should have multiple tests for metrics', () => {
    expect(1 + 1).toBe(2);
  });
});
`;
      fs.writeFileSync(testFilePath, testContent);
      console.log(`  Created test file: ${path.relative(PROJECT_ROOT, testFilePath)}`);
    }
    
    // Run the test with Datadog reporting
    console.log('  Running test with Datadog reporting...');
    execSync('npm run test:datadog -- --dir __tests__/verification', { 
      stdio: 'inherit',
      timeout: TEST_TIMEOUT
    });
    
    console.log('✅ Test completed successfully');
  } catch (error) {
    console.error('❌ Error running test:', error.message);
    process.exit(1);
  }
}

/**
 * Check if metrics file was generated
 */
function checkMetricFile() {
  console.log('🔍 Checking for test results file...');
  
  const resultsPath = path.join(TEST_RESULTS_DIR, 'reports', 'vitest-results.json');
  
  if (!fs.existsSync(resultsPath)) {
    console.error(`❌ Error: Test results file not found at ${resultsPath}`);
    process.exit(1);
  }
  
  console.log('✅ Test results file found');
  
  // Check file content
  try {
    const resultsContent = fs.readFileSync(resultsPath, 'utf8');
    const results = JSON.parse(resultsContent);
    
    if (!results.testResults || results.testResults.length === 0) {
      console.error('❌ Error: Test results file does not contain any test results');
      process.exit(1);
    }
    
    console.log(`  Found ${results.numTotalTests} tests (${results.numPassedTests} passed, ${results.numFailedTests} failed)`);
  } catch (error) {
    console.error('❌ Error parsing test results:', error.message);
    process.exit(1);
  }
}

/**
 * Query Datadog API to verify metrics were received
 */
async function queryDatadogMetrics() {
  console.log('🔍 Querying Datadog API to verify metrics...');
  console.log('  Waiting for metrics to appear in Datadog...');
  
  // Wait for metrics to appear in Datadog
  await new Promise(resolve => setTimeout(resolve, DATADOG_API_WAIT));
  
  // Current time and 15 minutes ago in Unix timestamp (seconds)
  const now = Math.floor(Date.now() / 1000);
  const from = now - 15 * 60; // 15 minutes ago
  
  // Query for the main metrics
  const metricName = `${METRIC_PREFIX}.total`;
  const query = `query=avg:${metricName}{*}&from=${from}&to=${now}`;
  
  const options = {
    hostname: 'api.datadoghq.com',
    path: `/api/v1/query?${query}`,
    method: 'GET',
    headers: {
      'DD-API-KEY': DATADOG_API_KEY,
      'DD-APPLICATION-KEY': DATADOG_APP_KEY
    }
  };
  
  try {
    const response = await httpRequest(options);
    
    if (response.status === 'ok' && response.series && response.series.length > 0) {
      console.log('✅ Metrics found in Datadog!');
      console.log(`  Metric: ${metricName}`);
      console.log(`  Points: ${response.series[0].pointlist.length}`);
      response.series[0].pointlist.forEach(point => {
        console.log(`  - Timestamp: ${new Date(point[0]).toISOString()}, Value: ${point[1]}`);
      });
    } else {
      console.warn('⚠️ No metrics found in Datadog API response');
      console.log('This may be normal if metrics were just sent and have not yet been processed');
      console.log('Please check the Datadog UI to verify metrics are being displayed.');
    }
  } catch (error) {
    console.error('❌ Error querying Datadog API:', error.message);
    console.log('This might happen if:');
    console.log('  - Your API/APP keys are incorrect');
    console.log('  - The metrics haven\'t been processed yet by Datadog');
    console.log('  - There\'s a network/firewall issue');
    
    console.log('\nPlease check the Datadog UI manually to verify metrics are appearing.');
  }
}

/**
 * Helper function for HTTP requests
 */
function httpRequest(options) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            resolve(JSON.parse(data));
          } catch (error) {
            reject(new Error(`Failed to parse response: ${error.message}`));
          }
        } else {
          reject(new Error(`HTTP Error ${res.statusCode}: ${data}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.end();
  });
}

// Execute the verification
verifyDatadogMetrics().catch(error => {
  console.error('Verification failed:', error);
  process.exit(1);
});
