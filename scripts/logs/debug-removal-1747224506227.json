{
  "timestamp": "2025-05-14T12:08:26.227Z",
  "mode": "identify",
  "dryRun": false,
  "summary": {
    "totalFiles": 704,
    "filesWithDebug": 169,
    "totalMatches": 2271,
    "modifiedFiles": 0
  },
  "details": [
    {
      "file": "vitest.config.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "          console.log(`Test results written to ${resultsPath}`)"
          ]
        }
      ]
    },
    {
      "file": "test-marketplace-build.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "\nconsole.log('Checking if the marketplace error boundary can be compiled...');\n",
            "  console.log('TypeScript compilation successful!');",
            "\nconsole.log('All checks passed!');"
          ]
        }
      ]
    },
    {
      "file": "query-users.js",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "    console.log('USERS:');",
            "    console.log('\\nBUILDER PROFILES:');"
          ]
        }
      ]
    },
    {
      "file": "production-fix.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "    console.log('Connecting to production database...');",
            "    \n    console.log(`Found ${existingProfiles.length} builder profiles in production`);\n    ",
            "      console.log(`Updating searchable flag for ${unsearchableProfiles.length} profiles...`);\n      "
          ]
        }
      ]
    },
    {
      "file": "instrumentation.ts",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "\n      console.log('Sentry server monitoring initialized');",
            "      console.log('Sentry disabled: Running in development or missing DSN');"
          ]
        }
      ]
    },
    {
      "file": "datadog-test-agent.js",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "    \n    console.log('Successfully processed test results and sent metrics to Datadog');"
          ]
        }
      ]
    },
    {
      "file": "check-searchable.js",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "    console.log('Builder Profile Search Status:');",
            "    console.log(result);"
          ]
        }
      ]
    },
    {
      "file": "check-prod-database.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "    console.log('Connecting to production database...');",
            "    \n    console.log('Builder Profile Search Status:');",
            "    console.log(totalProfiles);\n    "
          ]
        }
      ]
    },
    {
      "file": "check-feature-flags.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "      \n    console.log('Feature Flags from file:', enumValues);",
            "    console.log('Could not parse feature flags enum');",
            "      \n    console.log('\\nDefault Flag Values:', flagsLines);"
          ]
        }
      ]
    },
    {
      "file": "check-deployment-api.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "    console.log('Checking production marketplace API...');\n    ",
            "    \n    console.log('Production Marketplace API Response:');",
            "      console.log(`Success: Found ${buildersData.data.length} builders in production API`);"
          ]
        }
      ]
    },
    {
      "file": "check-builder-details.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "    console.log('Querying users with builder profiles...');",
            "\n    console.log('Total users:', users.length);",
            "    console.log('\\nBuilder Profile Details:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-schema-consistency.js",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "  console.log('üîç Verifying schema consistency...\\n');\n  ",
            "    console.log('\\nüß™ Testing critical queries...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-production-marketplace.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "      console.log(`\\n${index + 1}. ${builder.user.name}`);",
            "      console.log(`   Email: ${builder.user.email}`);",
            "      console.log(`   Searchable: ${builder.searchable ? '‚úÖ' : '‚ùå'}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-marketplace-functionality.js",
      "matches": 21,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 21,
          "examples": [
            "    \n    console.log(`üìä ${envName} Stats:`);",
            "    console.log(`  Total Users: ${totalUsers}`);",
            "    console.log(`  Total Builders: ${totalBuilders}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-marketplace-fix.js",
      "matches": 22,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 22,
          "examples": [
            "      console.log(`Mapped 'image' ‚Üí 'imageUrl' for user ${user.id}`);",
            "  console.log('üîç Verifying marketplace service field mapping');",
            "  console.log('---------------------------------------------');\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-marketplace-builders.js",
      "matches": 22,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 22,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);",
            "      console.log(`  - ID: ${profile.id}`);",
            "      console.log(`  - User ID: ${profile.userId}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-demo-flag-implementation.js",
      "matches": 19,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 19,
          "examples": [
            "  console.log('Verifying demo flag implementation across the codebase...');\n  ",
            "  console.log('\\n=== Database Verification ===');\n  ",
            "      console.log('‚úÖ isDemo column exists in User table');"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-datadog-metrics.js",
      "matches": 21,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 21,
          "examples": [
            "  console.log('üîç Verifying Datadog metrics collection...');\n  ",
            "  \n  console.log('‚úÖ Verification completed successfully!');",
            "  console.log('üîç Checking Datadog agent...');\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-database-connection.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "  console.log('üîç Verifying Database Connection...\\n');\n  ",
            "    \n    console.log(`\\nüìä Database Stats:`);",
            "      console.log(`\\n‚ö†Ô∏è  Liam's account not found with email: liam@buildappswith.com`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-csp-update.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "\nconsole.log('üîç Verifying CSP updates for Clerk custom domain...\\n');\n",
            "  console.log(`üìÑ Checking ${file.name}:`);\n  ",
            "        console.log(`  ‚úÖ ${colors.green}${description}${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-clerk-roles.js",
      "matches": 19,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 19,
          "examples": [
            "    console.log('Checking for Liam\\'s account in database...');\n    ",
            "      console.log(`Found existing user: ${dbUser.email}`);",
            "      console.log(`Has builderProfile: ${!!dbUser.builderProfile}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/verify-calendly-migration.js",
      "matches": 56,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 56,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Calendly Migration Verification ===${colors.reset}\\n`);\n",
            "  console.log(`Please create a .env file with DATABASE_URL or set it in your environment.`);",
            "  console.log(`${colors.yellow}Checking database connection...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/validate-schema.js",
      "matches": 15,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 15,
          "examples": [
            "    console.log('Starting database schema validation...');\n    ",
            "    \n    console.log(`\\nFound ${tablesResult.length} tables in database`);\n    ",
            "    \n    console.log(`Found ${modelNames.length} models in Prisma schema`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/update-user-images.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "    console.log('Updating user imageUrl fields...');\n    ",
            "    \n    console.log(`Updated ${updateResult.count} user records`);\n    ",
            "      console.log(`- User ${user.id}: ${user.name || 'No name'}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-searchable-flag.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "\n    console.log(`Updated ${updated.count} builder profiles to be searchable`);\n",
            "\n    console.log(\"Builder profiles status:\");",
            "\n    console.log(`\\nTotal searchable profiles: ${allSearchable.length}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-liam-profile-complete.js",
      "matches": 22,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 22,
          "examples": [
            "    console.log('Starting complete profile update for Liam...');\n    ",
            "    console.log('Note: Image will be set by Clerk integration automatically');\n    ",
            "      console.log('No builder profile found, creating one...');\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/update-liam-prod.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);",
            "    console.log('\\nProfile Summary:');",
            "    console.log(`- User ID: ${liamUser.id}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-liam-prod-fixed.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);",
            "    console.log('\\nProfile Summary:');",
            "    console.log(`- User ID: ${liamUser.id}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-liam-clerk-id.js",
      "matches": 22,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 22,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Update Liam's Clerk ID Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Finding Liam's user record in production...${colors.reset}`);\n    ",
            "      console.log(`${colors.yellow}   Liam's user not found, creating...${colors.reset}`);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/update-liam-clerk-id-fixed.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "    console.log(`${colors.yellow}Checking User table structure...${colors.reset}`);\n    ",
            "    \n    console.log(`${colors.cyan}User table columns:${colors.reset}`);",
            "      console.log(`  ${col.column_name}: ${col.data_type}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-expertise-areas.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "    console.log('Checking expertiseAreas field for all builder profiles...');\n    ",
            "    console.log(`Found ${allProfiles.length} builder profiles total`);\n    ",
            "    console.log(`Found ${profilesWithoutExpertise.length} profiles without expertiseAreas`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/update-db-imports.js",
      "matches": 27,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 27,
          "examples": [
            "\nconsole.log(`${colors.cyan}====================================${colors.reset}`);",
            "console.log(`${colors.cyan}  Database Import Standardization  ${colors.reset}`);",
            "console.log(`${colors.cyan}====================================${colors.reset}`);\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/update-component-imports.js",
      "matches": 25,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 25,
          "examples": [
            "          \n          console.log(`  ${originalImport} => ${newImport}`);",
            "      console.log(`  Updated ${changes} imports in ${file}`);",
            "      console.log(`  Would update ${changes} imports in ${file}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/test-field-mapper.js",
      "matches": 30,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 30,
          "examples": [
            "console.log('üß™ Testing User Field Mapper');",
            "console.log('---------------------------');\n",
            "console.log('Test case 1: User with image field');"
          ]
        }
      ]
    },
    {
      "file": "scripts/test-datadog-init.js",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "    console.log(`‚úÖ PASS: ${name}`);",
            "console.log(`\\nTest Results: ${passedTests} passed, ${failedTests} failed`);\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-schema-to-production.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "    console.log('  ‚Ä¢ Rename imageUrl field to image');",
            "    console.log('  ‚Ä¢ Ensure all other fields match development');",
            "    console.log('  ‚Ä¢ Preserve existing data');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-production-database.js",
      "matches": 10,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 10,
          "examples": [
            "  console.log('üöÄ Starting production database sync...');\n  ",
            "    console.log('üì¶ Backing up production data...');",
            "    console.log('üíæ Exporting user data...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-production-clerk-users.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "    console.log('Starting production user synchronization...');\n    ",
            "        console.log(`Updating existing user: ${userData.email}`);\n        ",
            "        console.log(`Creating new user: ${userData.email}`);\n        "
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-liam-profile.js",
      "matches": 24,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 24,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Liam Profile Sync Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Syncing schema to production...${colors.reset}`);\n    ",
            "      console.log(`${colors.green}‚úì Schema synced to production${colors.reset}\\n`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-dev-prod-databases.js",
      "matches": 18,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 18,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Database Synchronization Check ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Checking development database migrations...${colors.reset}`);",
            "      console.log(devStatus);"
          ]
        }
      ]
    },
    {
      "file": "scripts/sync-database.js",
      "matches": 13,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 13,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Buildappswith Database Sync Tool ===${colors.reset}\\n`);",
            "console.log(`${colors.yellow}DATABASE_URL is configured: ${process.env.DATABASE_URL ? 'Yes' : 'No'}${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}Step 1: Generating Prisma client...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/standardize-imports.js",
      "matches": 24,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 24,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Import Standardization Tool ===${colors.reset}`);",
            "console.log(`Mode: ${analyzeMode ? 'Analyze' : previewMode ? 'Preview' : 'Fix'}`);",
            "  console.log(`Target directory: ${targetDir}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/simplified-clean-slate.js",
      "matches": 26,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 26,
          "examples": [
            "  console.log('üöÄ Starting clean slate database sync...\\n');\n  ",
            "    console.log('Step 1: Backing up production data...');",
            "    console.log('‚úÖ Backup saved to:', backupPath);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/simple-marketplace-test.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "    console.log('üß™ Testing marketplace with actual schema...\\n');\n    ",
            "    console.log(`Total builder profiles: ${totalBuilders}`);\n    ",
            "    console.log(`Searchable builders: ${searchableBuilders}`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/setup-production-db.js",
      "matches": 21,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 21,
          "examples": [
            "  console.log(`${colors.bright}${colors.cyan}=== Buildappswith Production Database Setup ===${colors.reset}\\n`);\n  ",
            "  console.log(`${colors.yellow}Before continuing, you need to:${colors.reset}`);",
            "  console.log(`1. Create a production database in your Neon dashboard`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/setup-datadog-test-visualization.js",
      "matches": 42,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 42,
          "examples": [
            "console.log(`üîß Environment: ${NODE_ENV}`);\n",
            "  console.log(`Found DATADOG_API_KEY from direct environment variable`);",
            "  console.log(`Found DATADOG_APP_KEY from direct environment variable`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-with-env.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log(`Running in ${NODE_ENV} environment`);\n",
            "      console.log(`Loading environment from ${file}`);",
            "  console.log(`Database URL: ${sanitizedUrl}`);\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-demo-builders.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "  console.log('üå± Seeding demo builders...');\n  ",
            "      \n      console.log(`‚úì Created demo builder: ${user.firstName} ${user.lastName}`);",
            "  \n  console.log('‚úÖ Demo seeding complete');"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-db.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "console.log(`Running in ${NODE_ENV} environment`);\n",
            "    console.log(`Loading environment from ${file}`);",
            "\nconsole.log('Starting database seeding...');\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/restore-from-backup.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "  console.log(`Backup file: ${backupFile}`);\n  ",
            "    console.log(`Backup timestamp: ${backupData.timestamp}`);\n    ",
            "    console.log(`‚úÖ Restored ${backupData.users.length} users`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/restore-dev-from-backup.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "      console.log(`Backup timestamp: ${backupData.timestamp}`);\n      ",
            "      console.log(`‚úÖ Restored ${userCount} users`);\n      ",
            "      console.log(`‚úÖ Restored ${builderCount} builder profiles`);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/restore-data-to-both.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "    console.log(`Using backup from: ${backupData.timestamp}`);\n    ",
            "    console.log(`‚úÖ Restored ${backupData.users.length} users`);\n    ",
            "    console.log(`‚úÖ Restored ${builderCount} builder profiles`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/reset-feature-flags.js",
      "matches": 12,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 12,
          "examples": [
            "\nconsole.log('üö© Resetting feature flags to default values...');\n",
            "    console.log('‚úÖ Successfully removed feature flags from localStorage');",
            "      console.log('‚úÖ Successfully reset feature flags via window.featureFlags API');"
          ]
        }
      ]
    },
    {
      "file": "scripts/reset-database-for-clerk.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "      console.log('\\n‚ö†Ô∏è  WARNING: This script should not be run directly in production! ‚ö†Ô∏è');",
            "      console.log('Please use the admin dashboard migration tool instead.\\n');",
            "\n    console.log('\\n‚ö†Ô∏è  WARNING: This will RESET your entire database! ‚ö†Ô∏è');"
          ]
        }
      ]
    },
    {
      "file": "scripts/reset-and-sync-production.js",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/remove-field-mapper.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Remove Field Mapper Utility ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Updating marketplace service...${colors.reset}`);",
            "    console.log(`${colors.green}‚úì Updated marketplace service${colors.reset}`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/remove-debug-from-prod.js",
      "matches": 25,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 25,
          "examples": [
            "\nconsole.log(`üîç ${mode === 'identify' ? 'Identifying' : 'Removing'} debug information from production code...`);",
            "  console.log(`${colors.yellow}Running in DRY RUN mode - no files will be modified${colors.reset}\\n`);",
            "console.log('\\nüìä Summary:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/reconcile-migrations.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "  console.log(`${colors.bright}${colors.cyan}=== Reconciling Migration History ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Step 1: Backing up existing migrations...${colors.reset}`);",
            "        console.log(`Backed up migration: ${item}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/production-fix-correct-schema.js",
      "matches": 12,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 12,
          "examples": [
            "    console.log('üîß Fixing production with correct schema...\\n');\n    ",
            "    console.log('Step 1: Updating Liam\\'s builder profile...');\n    ",
            "    \n    console.log('‚úÖ Liam\\'s profile updated');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/production-database-check.js",
      "matches": 34,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 34,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Production Database Check ===${colors.reset}\\n`);\n",
            "\nconsole.log(`${colors.yellow}Using PRODUCTION_DATABASE_URL${colors.reset}`);\n",
            "  console.log(`\\n${colors.yellow}1. Testing database connection...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/prisma-builder-sync.js",
      "matches": 35,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 35,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Builder Profile Sync Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Analyzing builder profiles before sync...${colors.reset}`);\n    ",
            "      \n      console.log(`${colors.cyan}Development database: ${devBuilders.length} builder profiles${colors.reset}`);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/prisma-backup-and-sync.js",
      "matches": 30,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 30,
          "examples": [
            "    console.log(`${colors.yellow}1. Backing up production database schema...${colors.reset}`);",
            "      console.log(`${colors.green}‚úì Schema backup created at: ${schemaBackupPath}${colors.reset}\\n`);",
            "      console.log(`${colors.yellow}Continuing with sync process...${colors.reset}\\n`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/pre-commit-import-check.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Import Standards Check ===${colors.reset}\\n`);\n",
            "      console.log(`${colors.yellow}No TypeScript files staged for commit.${colors.reset}`);",
            "    \n    console.log(`${colors.yellow}Checking ${stagedFiles.length} staged files for non-standard imports...${colors.reset}\\n`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/migrate-logger.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "\nconsole.log(`${colors.cyan}=== Logger Migration Script ===${colors.reset}`);",
            "console.log(`Finding and updating references to enhanced-logger...`);\n",
            "    console.log(`${colors.blue}Processing ${file}...${colors.reset}`);\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/investigate-social-links.js",
      "matches": 21,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 21,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Investigating socialLinks Column Issue ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Checking if BuilderProfile table exists...${colors.reset}`);",
            "        console.log(`${colors.green}‚úì BuilderProfile table exists${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/investigate-marketplace-api.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "  \n  console.log('=== MARKETPLACE API DIRECT TEST ===');",
            "  console.log('Base URL:', baseUrl);\n  ",
            "    console.log('\\n1. Testing basic API call:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/init-production-database.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Initialize Production Database ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Applying migrations to production...${colors.reset}`);",
            "    console.log(`\\n${colors.yellow}2. Verifying tables were created...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/generate-prod-schema.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "console.log('Pulling schema from production database...');",
            "console.log('Generating Prisma client...');",
            "\nconsole.log('Done! Your Prisma client now matches production.');"
          ]
        }
      ]
    },
    {
      "file": "scripts/generate-barrel-exports.js",
      "matches": 15,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 15,
          "examples": [
            "    console.log(`\\nFound ${componentFiles.length} files in ${dir}`);",
            "      console.log(`Skipping ${indexPath} - no exports found`);",
            "    console.log(`No changes needed for ${indexPath}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/generate-architecture-report.ts",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "  console.log('Generating architecture report...');\n  ",
            "  \n  console.log(`Architecture report generated at ${reportOutputPath}`);",
            "  console.log(`HTML report generated at ${outputPath}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-ui-imports.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "\nconsole.log(`Found ${files.length} files to process`);\n",
            "    console.log(`Found direct imports in ${file}`);\n    ",
            "      \n      console.log(`Replaced ${replacements} UI imports with a single import in ${file}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-ui-core-imports.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "\nconsole.log('Fixing UI component imports to use /core/ path...');\n",
            "    console.log(`Processing ${filePath}...`);\n    ",
            "      console.log(`‚úÖ Fixed ${replacements} imports in ${filePath}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-social-links-drift.js",
      "matches": 12,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 12,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Fixing Social Links Schema Drift ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}Creating migration file for social links...${colors.reset}`);\n  ",
            "  \n  console.log(`${colors.green}‚úì Migration file created${colors.reset}`);\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-production-schema.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "    console.log('Starting production schema fix...');\n    ",
            "      console.log(`Executing: ${statement}`);",
            "    console.log('Schema fix completed successfully');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-production-marketplace.js",
      "matches": 13,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 13,
          "examples": [
            "    console.log('üîß Fixing PRODUCTION marketplace...\\n');\n    ",
            "    console.log('Connected to database:', dbInfo[0].current_database);\n    ",
            "    \n    console.log(`Current state: ${userCount} users, ${builderCount} builder profiles`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-production-final.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "    console.log('üîß Final production fix...\\n');\n    ",
            "    console.log('1. Updating Liam\\'s profile...');\n    ",
            "    \n    console.log('‚úÖ Updated Liam\\'s profile');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-prod-marketplace-final.js",
      "matches": 15,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 15,
          "examples": [
            "    console.log('üîß Fixing PRODUCTION marketplace...\\n');\n    ",
            "    console.log('Connected to:', dbInfo[0].current_database);\n    ",
            "    console.log('\\n1. Adding missing columns...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-prisma-types.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Buildappswith Prisma Type Fix Tool ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}Step 1: Updating Prisma schema...${colors.reset}`);\n  ",
            "      console.log(`${colors.green}‚úì Added socialLinks field to BuilderProfile model${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-migration-sync.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "  console.log(`${colors.bright}${colors.cyan}=== Fixing Migration Sync Issues ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Step 1: Checking current migration status...${colors.reset}`);",
            "      console.log(`${colors.green}‚úì No drift detected${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-migration-drift.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Fix Migration Drift ===${colors.reset}\\n`);\n",
            "\nconsole.log(`${colors.yellow}Using PRODUCTION_DATABASE_URL${colors.reset}`);",
            "    console.log(`${colors.yellow}1. Checking local migrations...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-image-references.js",
      "matches": 10,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 10,
          "examples": [
            "    console.log(`Processing ${filePath}...`);",
            "      console.log(`No changes needed in ${filePath}`);",
            "  console.log('Fixing image field references in the codebase...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-duplicate-migrations.js",
      "matches": 22,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 22,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Fixing Duplicate Migrations ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}1. Analyzing migrations...${colors.reset}`);\n  ",
            "  \n  console.log(`Found ${socialLinksMigrations.length} 'add_social_links' migrations:`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-builder-visibility.js",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "    console.log('Fixing builder profile visibility...');\n    ",
            "    \n    console.log(`Found ${builders.length} users with BUILDER role`);\n    ",
            "    console.log(`Found ${missingProfiles.length} builders missing builder profiles`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-build-issues.js",
      "matches": 15,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 15,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Fixing Build Issues ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Regenerating Prisma client...${colors.reset}`);",
            "      console.log(`${colors.green}‚úì Prisma client regenerated${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-barrel-exports.js",
      "matches": 10,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 10,
          "examples": [
            "  console.log(`Checking ${filePath}...`);\n  ",
            "      console.log(`  File doesn't exist, skipping`);",
            "      console.log(`  Found ${matches.length} absolute path exports to update`);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/fix-barrel-export-names.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "  console.log(`Processing: ${filePath}`);",
            "  console.log(`Updated: ${filePath}`);",
            "\nconsole.log('‚úÖ Barrel export names fixed successfully!');"
          ]
        }
      ]
    },
    {
      "file": "scripts/find-component-imports.js",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "    console.log(message);"
          ]
        }
      ]
    },
    {
      "file": "scripts/final-production-fix.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "    console.log('üîß Final production fix...\\n');\n    ",
            "    console.log('Step 1: Updating Liam\\'s builder profile...');\n    ",
            "    \n    console.log('‚úÖ Liam\\'s profile updated');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/final-marketplace-fix.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "    console.log('üîß Final marketplace fix...\\n');\n    ",
            "    console.log('Step 1: Checking Liam\\'s current state...');\n    ",
            "    \n    console.log('Liam\\'s current state:', liam[0]);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/extract-auth-architecture.ts",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "  console.log('Starting authentication architecture extraction...');\n  ",
            "  \n  console.log('Authentication architecture extraction completed successfully.');",
            "  \n  console.log(`Authentication architecture saved to ${outputDir}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/extract-architecture.ts",
      "matches": 13,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 13,
          "examples": [
            "  console.log('Starting architecture extraction...');\n  ",
            "  \n  console.log('Architecture extraction completed successfully.');",
            "  console.log(`Processing ${sourceFiles.length} source files...`);\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/direct-schema-fix.js",
      "matches": 19,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 19,
          "examples": [
            "  console.log('üîß Applying direct schema fixes to production...\\n');\n  ",
            "    console.log('Step 1: Checking current database state...');",
            "    console.log('‚úÖ Database connection verified');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/diagnose-migration-drift.js",
      "matches": 13,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 13,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Diagnosing Migration Drift ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}1. Checking file system migrations...${colors.reset}`);",
            "  \n  console.log(`Found ${fileMigrations.length} migrations in file system:`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/diagnose-image-field.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "  console.log('üîç Running database field diagnosis script');",
            "  console.log('------------------------------------------');\n",
            "    console.log('1. Checking database connection...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/diagnose-database-state.js",
      "matches": 20,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 20,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Database Diagnosis ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Listing all tables in database...${colors.reset}`);",
            "      \n      console.log(result1);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/db-schema-validation.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log('Initializing database clients...');\n  ",
            "      console.log(`‚úÖ Connected to ${env} database`);",
            "    console.log(`Getting schema metadata for ${env}...`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/create-unused-features-analyzer.ts",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "  console.log('Analyzing potentially unused features and architectural complexity...');\n  ",
            "  console.log('Analyzing component usage...');",
            "  console.log('Analyzing architectural complexity...');"
          ]
        }
      ]
    },
    {
      "file": "scripts/create-liam-user.js",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/create-demo-builders.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "    console.log('Starting demo builder creation...');\n    ",
            "        console.log(`Updating existing demo builder: ${builderData.email}`);\n        ",
            "        console.log(`Creating new demo builder: ${builderData.email}`);\n        "
          ]
        }
      ]
    },
    {
      "file": "scripts/create-baseline-migration.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Creating Baseline Migration ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Step 1: Validating schema...${colors.reset}`);",
            "    console.log(`\\n${colors.yellow}Step 2: Creating baseline migration...${colors.reset}`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/copy-dev-to-prod.js",
      "matches": 8,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 8,
          "examples": [
            "    console.log(`‚úÖ Copied ${devUsers.length} users`);\n    ",
            "    console.log(`‚úÖ Copied ${devBuilders.length} builder profiles`);\n    ",
            "    console.log(`‚úÖ Copied ${devClients.length} client profiles`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/compare-user-schema.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log('Comparing User table schema between environments...');\n  ",
            "    console.log('Development User table schema:');",
            "    \n    console.log('Development columns:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/clerk-db-sync.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "    console.log('Starting Clerk-Database user synchronization...');\n    ",
            "    console.log(`Found ${clerkUsers.length} users in Clerk`);\n    ",
            "        console.log(`Skipping user without email: ${clerkUser.id}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/clear-browser-storage.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "\nconsole.log(`\n=========================================\nBROWSER STORAGE RESET COMMANDS\n=========================================\n\nPaste the following commands into your browser console to clear all storage:\n\n// Clear localStorage\nlocalStorage.clear();\n",
            "\nconsole.log('After running these commands, the application should restart with problematic components disabled.');",
            "console.log('If you still experience issues, run \"./scripts/reset-next.sh\" to completely reset the development server.');"
          ]
        }
      ]
    },
    {
      "file": "scripts/clean-slate-sync.js",
      "matches": 32,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 32,
          "examples": [
            "  console.log('üöÄ Starting clean slate database sync...\\n');\n  ",
            "    console.log('Step 1: Backing up production data...');",
            "    console.log('‚úÖ Backup saved to:', backupPath);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-typescript-fixes.js",
      "matches": 8,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 8,
          "examples": [
            "\nconsole.log(\"üîç Checking TypeScript errors after fixes...\\n\");\n",
            "  console.log(\"\\n‚úÖ Type check completed successfully!\");",
            "  console.log(\"\\n‚ö†Ô∏è Some TypeScript errors still remain. Please review the output above.\");"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-session-types.js",
      "matches": 21,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 21,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Session Types Check Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Checking session types in development:${colors.reset}`);\n    ",
            "        console.log(`${colors.cyan}Liam's builder ID in dev: ${builderId}${colors.reset}`);\n        "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-searchable.js",
      "matches": 28,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 28,
          "examples": [
            "  console.log('Checking searchable builder profiles and marketplace API...');\n  ",
            "    \n    console.log(`Found ${searchableBuilders.length} searchable builder profiles in database`);",
            "    console.log('Sample of searchable builders:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-profile.js",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "    console.log('Checking Liam\\'s profile in the database...');\n    ",
            "    \n    console.log('Profile found:', profile);\n    ",
            "      console.log('Expertise areas are populated!');"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-profile-status.js",
      "matches": 28,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 28,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Profile Status Check Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}Checking development profiles:${colors.reset}`);\n    ",
            "      console.log(`${colors.cyan}Users in dev: ${devUsers[0].count}${colors.reset}`);\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-production-columns.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "    \n    console.log('User table columns:');",
            "      console.log(`  - ${col.column_name}: ${col.data_type}`);",
            "    \n    console.log('\\nBuilderProfile table columns:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-prod-users.js",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "    console.log('Checking PRODUCTION users...\\n');\n    ",
            "    \n    console.log(`Total users: ${userCount}`);",
            "    console.log(`Total builder profiles: ${builderCount}`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-prod-schema.js",
      "matches": 8,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 8,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);",
            "    console.log(`User count: ${userCount[0].count}`);\n    ",
            "      console.log(\"Sample users:\");"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-prod-raw.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "    console.log('Checking PRODUCTION with raw SQL...\\n');\n    ",
            "      console.log(`\\nMaking ${unsearchable.length} builders searchable...`);\n      ",
            "      \n      console.log('‚úÖ All builders now searchable');"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-prod-database.js",
      "matches": 31,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 31,
          "examples": [
            "  console.log(`${color}${message}${colors.reset}`);",
            "        console.log(`  - ID: ${user.id}`);",
            "        console.log(`    Name: ${user.name || 'Not set'}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-migration-status.js",
      "matches": 12,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 12,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Checking Migration Status ===${colors.reset}\\n`);\n",
            "\nconsole.log(`${colors.yellow}Database URL is set: ${process.env.DATABASE_URL ? 'Yes' : 'No'}${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}Running prisma migrate status...${colors.reset}\\n`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-migration-history.js",
      "matches": 12,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 12,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Checking Migration History ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}1. Migrations recorded in database:${colors.reset}`);\n  ",
            "    \n    console.log(result);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-marketplace-visibility.js",
      "matches": 26,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 26,
          "examples": [
            "  \n  console.log('=== MARKETPLACE VISIBILITY CHECK ===');",
            "  console.log('Environment:', process.env.NODE_ENV);",
            "    console.log('\\n1. Total Builder Profiles:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-image-field.js",
      "matches": 29,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 29,
          "examples": [
            "  console.log('Checking database schema and data for image field inconsistencies...');\n  ",
            "    \n    console.log('Schema analysis:');",
            "    console.log(`- image field exists: ${hasImageField}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-git-branches.js",
      "matches": 23,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 23,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Git Branch Check ===${colors.reset}\\n`);\n",
            "  console.log(`${colors.yellow}1. Current branch:${colors.reset}`);",
            "  console.log(`   ${currentBranch}`);\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-final.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "\nconsole.log(\"Final TypeScript Error Resolution Report\");",
            "console.log(\"----------------------------------------\");",
            "console.log(\"‚úÖ Removed mock data dependencies\");"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-demo-accounts.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "    console.log('Checking demo accounts in database...');\n    ",
            "    \n    console.log(`Found ${demoAccounts.length} demo accounts:`);\n    ",
            "      console.log(`  Has builder profile: ${!!account.builderProfile}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-db-schema.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "\nconsole.log('Checking database schema...');\n",
            "  \n  console.log('Tables in database:');",
            "  console.log(tablesResult);\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/check-current-status.js",
      "matches": 10,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 10,
          "examples": [
            "console.log(`${colors.cyan}=== Local Migrations ===${colors.reset}`);",
            "console.log(`Found ${fileMigrations.length} migrations:`);",
            "console.log(`\\n${colors.cyan}=== Production Database Status ===${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-calendly-fields.js",
      "matches": 28,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 28,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Calendly Fields Verification ===${colors.reset}\\n`);\n",
            "  console.log(`Please create a .env file with DATABASE_URL or set it in your environment.`);",
            "    console.log(`${colors.yellow}Checking database connection...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/check-builder-details.js",
      "matches": 29,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 29,
          "examples": [
            "  console.log('Checking builder profiles and user details...');\n  ",
            "    \n    console.log(`Found ${users.length} users in the database`);\n    ",
            "    \n    console.log(`\\nFound ${searchableBuilders.length} searchable builder profiles`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/backup-production.js",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "    \n    console.log(`‚úÖ Data exported to: ${dataFile}`);\n    ",
            "    \n    console.log(`‚úÖ Schema exported to: ${schemaFile}`);\n    ",
            "    console.log(`  Users backed up: ${users.length}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/backup-production-raw.js",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "    \n    console.log(`‚úÖ Data exported to: ${dataFile}`);\n    ",
            "    \n    console.log(`‚úÖ Schema exported to: ${schemaFile}`);\n    ",
            "    console.log(`  Users backed up: ${userResult.rows.length}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/backup-and-sync-database.js",
      "matches": 28,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 28,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Database Backup and Sync Tool ===${colors.reset}\\n`);\n",
            "    console.log(`${colors.yellow}1. Creating backup of production database...${colors.reset}`);",
            "      console.log(`${colors.green}‚úì Production database backup created at: ${backupFilePath}${colors.reset}\\n`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/apply-image-migration.js",
      "matches": 28,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 28,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Image to ImageUrl Migration ===${colors.reset}\\n`);\n",
            "  console.log(`Please create a .env file with DATABASE_URL or set it in your environment.`);",
            "    console.log(`${colors.yellow}Checking database connection...${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/apply-full-schema.js",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "    console.log('  1. Restore data to both databases');",
            "    console.log('  2. Verify marketplace functionality');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/analyze-barrel-exports.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "\nconsole.log(`${colors.bright}${colors.cyan}=== Barrel Export Analyzer ===${colors.reset}`);",
            "console.log(`Mode: ${fixMode ? 'Analysis & Fix' : 'Analysis Only'}\\n`);\n",
            "    console.log(`${colors.bright}Analyzing barrel: ${colors.blue}${relativePath}${colors.reset}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/analyze-backup-schema.js",
      "matches": 18,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 18,
          "examples": [
            "  \n  console.log('üìä Analyzing backup data structure...\\n');\n  ",
            "  \n  console.log('User fields:');",
            "      console.log(`  - ${key}: array[${sampleUser[key].length}]`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/add-marketplace-fields.js",
      "matches": 60,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 60,
          "examples": [
            "\n  console.log(`${colors.bright}${colors.cyan}Adding missing marketplace fields to database...${colors.reset}\\n`);\n  ",
            "    console.log(`${colors.yellow}Testing database connection...${colors.reset}`);\n    ",
            "    \n    console.log(`${colors.green}Connected to database. Found ${tables.length} tables.${colors.reset}`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-profile.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "  console.log('Starting Liam Jons profile and session types update...');\n  ",
            "      console.log('Liam Jons user not found. Creating user...');\n      ",
            "    \n    console.log('Updated Liam Jons user roles and founder status');\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-profile-with-expertise.js",
      "matches": 8,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 8,
          "examples": [
            "  console.log('Updating Liam\\'s profile with expertise areas...');\n",
            "    console.log('Creating user for Liam with Clerk ID:', clerkUserId);\n    ",
            "    console.log('User already exists:', user.id);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-prod.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "  console.log('Updating Liam\\'s profile in PRODUCTION with direct SQL...');\n",
            "  console.log('‚ö†Ô∏è RUNNING IN PRODUCTION MODE ‚ö†Ô∏è');",
            "  console.log(`Using Clerk ID: ${clerkUserId}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-prod-fixed.js",
      "matches": 18,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 18,
          "examples": [
            "  console.log('Updating Liam\\'s profile in PRODUCTION with direct SQL...');\n",
            "  console.log('‚ö†Ô∏è RUNNING IN PRODUCTION MODE ‚ö†Ô∏è');",
            "  console.log(`Using Clerk ID: ${clerkUserId}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-expertise-only.js",
      "matches": 11,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 11,
          "examples": [
            "  console.log('Updating Liam\\'s expertise areas...');\n",
            "    console.log(`User with Clerk ID ${clerkUserId} not found in database. Creating user.`);\n    ",
            "      console.log('Trying to get existing user by email instead...');\n      "
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/update-liam-direct-sql.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "  console.log('Updating Liam\\'s profile with direct SQL...');\n",
            "    console.log('‚ö†Ô∏è RUNNING IN PRODUCTION MODE ‚ö†Ô∏è');",
            "    console.log(`Using Clerk ID: ${clerkUserId}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/test-users.js",
      "matches": 19,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 19,
          "examples": [
            "  console.log('Creating users in Clerk...');",
            "\n  console.log('Note: Skipping Clerk user creation due to API changes.');",
            "  console.log('Will create only database records for test users.');\n"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/seed-builder-profiles.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "  console.log(`Running in ${NODE_ENV} environment`);\n",
            "      console.log(`Loading environment from ${file}`);",
            "    console.log(`Database URL: ${sanitizedUrl}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/reset-test-db.js",
      "matches": 14,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 14,
          "examples": [
            "  console.log('Resetting test database...');\n  ",
            "      console.log(`Ensured schema exists: ${options.schema}`);",
            "    \n    console.log(`Found ${tables.length} tables to reset`);\n    "
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/quick-seed.js",
      "matches": 8,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 8,
          "examples": [
            "  console.log('Creating basic profiles...');\n  ",
            "      console.log('Created Liam Jones user');",
            "      console.log('Liam Jones user already exists');"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/create-session-types.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "  console.log(`Creating session types for builder ${builderId}...`);",
            "        console.log(`Session type \"${sessionType.title}\" already exists for builder ${builderId}, updating...`);",
            "        console.log(`Creating session type \"${sessionType.title}\" for builder ${builderId}...`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/create-profiles.ts",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "  console.log('Creating builder profiles...');\n",
            "      console.log('Created Liam Jones user');",
            "      console.log('Liam Jones user already exists');"
          ]
        }
      ]
    },
    {
      "file": "scripts/seed-data/create-dummy-profiles.ts",
      "matches": 5,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 5,
          "examples": [
            "  console.log('Creating dummy builder profiles...');\n",
            "    console.log('Liam Jones profile:', liamResult);",
            "\n      console.log(`Created profile for ${builder.name}`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/datadog/vitest-datadog-reporter.js",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "    console.log('\\nüê∂ Datadog Reporter: Initialized, will send metrics when tests complete');",
            "    console.log('\\nüê∂ Datadog Reporter: Test run complete');",
            "    console.log(`   Tests: ${this.results.total} total, ${this.results.success} passed, ${this.results.failure} failed, ${this.results.skipped} skipped`);"
          ]
        }
      ]
    },
    {
      "file": "scripts/datadog/setup.js",
      "matches": 16,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 16,
          "examples": [
            "  console.log('üê∂ Setting up Datadog integration for test visualization');\n  ",
            "    \n    console.log('\\n‚úÖ Datadog integration setup complete!');",
            "    console.log('Now you can run the following commands:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/datadog/coverage-processor.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "    \n    console.log('üê∂ Datadog Coverage Processor: Processing coverage data');\n    ",
            "    \n    console.log('   Coverage processing complete');\n    ",
            "  \n  console.log('   Sending coverage metrics to Datadog...');\n  "
          ]
        }
      ]
    },
    {
      "file": "scripts/datadog/dashboards/create-dashboard.js",
      "matches": 44,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 44,
          "examples": [
            "console.log('Loading environment from: .env');",
            "\nconsole.log('Loading environment from: .env.development');",
            "\nconsole.log('Loading environment from: .env.local');"
          ]
        }
      ]
    },
    {
      "file": "scripts/clerk-migration/nextauth-cleanup.js",
      "matches": 18,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 18,
          "examples": [
            "      console.log('package.json not found');",
            "      console.log(`\\x1b[31m[DEPENDENCY]\\x1b[0m Found NextAuth dependency in package.json: version ${dependencies['next-auth']}`);",
            "      console.log('Run the following command to remove it:');"
          ]
        }
      ]
    },
    {
      "file": "scripts/clerk-migration/find-nextauth-refs.js",
      "matches": 17,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 17,
          "examples": [
            "      \n      console.log(`\\x1b[31m[CRITICAL]\\x1b[0m Found NextAuth dependency in package.json: version ${dependencies['next-auth']}`);",
            "      console.log('\\x1b[32m[OK]\\x1b[0m No NextAuth dependency found in package.json');",
            "  console.log('Scanning for NextAuth references...');\n  "
          ]
        }
      ]
    },
    {
      "file": "prisma/seed/seed.js",
      "matches": 9,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 9,
          "examples": [
            "  console.log('Seeding timeline data...');\n  ",
            "      console.log('Creating admin user...');",
            "    console.log('Seeding AI capabilities...');\n    "
          ]
        }
      ]
    },
    {
      "file": "lib/marketplace/data/marketplace-service.ts",
      "matches": 10,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 10,
          "examples": [
            "    \n    console.log('[PROD DEBUG] Environment:', process.env.NODE_ENV);",
            "      console.log('[PROD DEBUG] Count result:', total);",
            "      console.log('[PROD DEBUG] Count error stack:', countError instanceof Error ? countError.stack : 'No stack');"
          ]
        }
      ]
    },
    {
      "file": "lib/marketplace/data/demo-account-handler.ts",
      "matches": 7,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 7,
          "examples": [
            "  \n  console.log('[PROD DEBUG DEMO] Environment:', process.env.NODE_ENV);",
            "  console.log('[PROD DEBUG DEMO] excludeDemo filter:', shouldExcludeDemo);",
            "    console.log('[PROD DEBUG DEMO] Adding isDemo:false filter in production');\n    "
          ]
        }
      ]
    },
    {
      "file": "lib/marketplace/data/analytics-service.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "    console.log('Tracking marketplace event:', fullEvent);\n    "
          ]
        }
      ]
    },
    {
      "file": "lib/datadog/tracer.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "      console.log('Datadog APM disabled for current environment');"
          ]
        }
      ]
    },
    {
      "file": "lib/datadog/init.ts",
      "matches": 3,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 3,
          "examples": [
            "        \n        console.log(`Datadog RUM initialized for ${mergedConfig.env} environment`);",
            "      console.log(`Datadog logs initialized for ${config.env} environment`);",
            "      console.log('Datadog APM disabled for current environment');"
          ]
        }
      ]
    },
    {
      "file": "lib/datadog/server/tracer.server.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "        console.log('Datadog APM disabled for current environment');"
          ]
        }
      ]
    },
    {
      "file": "lib/datadog/client/rum.client.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "          \n          console.log(`Datadog RUM initialized for ${config.env} environment`);"
          ]
        }
      ]
    },
    {
      "file": "lib/datadog/client/logs.client.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "          console.log(`Datadog logs initialized for ${config.env} environment`);"
          ]
        }
      ]
    },
    {
      "file": "lib/auth/clerk/verify-auth-migration.ts",
      "matches": 6,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 6,
          "examples": [
            "  console.log(`Report generated at ${REPORT_PATH}`);",
            "  console.log('Starting NextAuth migration verification...');\n  ",
            "  console.log('Parsed cleanup list');\n  "
          ]
        }
      ]
    },
    {
      "file": "lib/auth/clerk/remove-nextauth-deps.js",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "    console.log('Reading package.json...');",
            "      console.log('Dependencies removed successfully!');",
            "      console.log('Please run \"pnpm install\" to update the lockfile.');"
          ]
        }
      ]
    },
    {
      "file": "e2e/global-setup.ts",
      "matches": 4,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 4,
          "examples": [
            "  console.log('Running global setup for E2E tests...');\n  ",
            "    \n    console.log('Test data seeding completed successfully');",
            "    console.log('Successfully created all authentication states');"
          ]
        }
      ]
    },
    {
      "file": "components/providers/datadog-rum-provider.tsx",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "      console.log('NOTE: Datadog RUM monitoring is temporarily disabled to resolve build issues');"
          ]
        }
      ]
    },
    {
      "file": "components/profile/user-profile.tsx",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "      console.log('Updating profile:', updatedProfile);\n      "
          ]
        }
      ]
    },
    {
      "file": "components/landing/performance-optimizations.tsx",
      "matches": 2,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 2,
          "examples": [
            "        console.log(`Web Vital: ${name}`, value);\n        ",
            "              console.log(`[Performance] ${entry.name}:`, entry);"
          ]
        }
      ]
    },
    {
      "file": "app/api/test/auth/route.ts",
      "matches": 1,
      "changes": [
        {
          "pattern": "console.log statements",
          "count": 1,
          "examples": [
            "    console.log('Authenticated user in test route:', {\n      id: user.id,\n      clerkId: user.clerkId,\n      roles: user.roles,\n      email: user.email\n    });\n    "
          ]
        }
      ]
    }
  ]
}