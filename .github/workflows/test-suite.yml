name: Comprehensive Test Suite

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop, feature/testing-implementation]
  workflow_dispatch:

jobs:
  test-setup:
    name: Test Setup
    runs-on: ubuntu-latest
    outputs:
      database-url: ${{ steps.create-db.outputs.database-url }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: buildappswith_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database connection
        id: create-db
        run: |
          DATABASE_URL="postgresql://postgres:postgres@localhost:5432/buildappswith_test"
          echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV
          echo "database-url=${DATABASE_URL}" >> $GITHUB_OUTPUT
          echo "DATABASE_URL_TEST=${DATABASE_URL}" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Apply database migrations
        run: pnpm prisma migrate deploy

      - name: Seed test database with Clerk test users
        run: |
          echo "Seeding test database with Clerk test users..."
          node __tests__/utils/database/seed-test-users.js
        env:
          NODE_ENV: test

  unit-tests:
    name: Unit Tests
    needs: test-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test "unit/**/*.test.tsx" --reporter=default,json
        env:
          DATABASE_URL: ${{ needs.test-setup.outputs.database-url }}
          CI: true
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Store unit test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 14

  integration-tests:
    name: Integration Tests
    needs: test-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run integration tests
        run: pnpm test "integration/**/*.test.tsx" --reporter=default,json
        env:
          DATABASE_URL: ${{ needs.test-setup.outputs.database-url }}
          CI: true
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Store integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 14

  api-tests:
    name: API Tests
    needs: test-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run API tests
        run: pnpm test "api/**/*.test.ts" --reporter=default,json
        env:
          DATABASE_URL: ${{ needs.test-setup.outputs.database-url }}
          CI: true
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Store API test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: test-results/
          retention-days: 14

  e2e-tests:
    name: E2E Tests
    needs: test-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application for E2E tests
        run: pnpm build
        env:
          DATABASE_URL: ${{ needs.test-setup.outputs.database-url }}
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Run E2E tests
        run: pnpm playwright test --project=chromium
        env:
          DATABASE_URL: ${{ needs.test-setup.outputs.database-url }}
          CI: true
          TEST_BASE_URL: http://localhost:3000
          NODE_ENV: test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 14

  test-report:
    name: Generate Test Report
    needs: [unit-tests, integration-tests, api-tests, e2e-tests]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results

      - name: Generate combined report
        run: |
          echo "# Test Summary" > test-summary.md
          echo "## Test Results" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- API Tests: ${{ needs.api-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "See artifacts for detailed reports." >> test-summary.md

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 14

      - name: Post summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });