name: Test Suite with Database Isolation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  setup-test-db:
    name: Setup Test Database
    uses: ./.github/workflows/test-database.yml

  unit-tests:
    name: Unit Tests
    needs: setup-test-db
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ needs.setup-test-db.outputs.database-url }}
      NODE_ENV: test
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
      DATADOG_SITE: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
      DATADOG_ENABLED: "true"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run unit tests with transaction isolation
        run: |
          pnpm test:unit
      
      - name: Upload test results to Datadog
        if: always()
        run: |
          ./node_modules/.bin/datadog-ci junit upload \
            ./test-results/reports/unit-tests.json \
            --service buildappswith \
            --env ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  integration-tests:
    name: Integration Tests
    needs: setup-test-db
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ needs.setup-test-db.outputs.database-url }}
      NODE_ENV: test
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
      DATADOG_SITE: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
      DATADOG_ENABLED: "true"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Initialize test database with seed data
        run: |
          echo "Seeding test database for integration tests..."
          node -e "require('./__tests__/utils/seed').seedTestData({ domains: ['users', 'profiles', 'scheduling', 'bookings'] })"
      
      - name: Run integration tests with worker isolation
        run: |
          pnpm test:integration
      
      - name: Upload test results to Datadog
        if: always()
        run: |
          ./node_modules/.bin/datadog-ci junit upload \
            ./test-results/reports/integration-tests.json \
            --service buildappswith \
            --env ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  e2e-tests:
    name: E2E Tests
    needs: setup-test-db
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ needs.setup-test-db.outputs.database-url }}
      NODE_ENV: test
      PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
      DATADOG_SITE: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
      
      - name: Build application
        run: pnpm build
      
      - name: Start application
        run: |
          pnpm start &
          sleep 5
      
      - name: Run Playwright tests
        run: pnpm test:e2e
      
      - name: Upload test results to Datadog
        if: always()
        run: |
          node scripts/datadog/playwright-results-processor.js
          ./node_modules/.bin/datadog-ci junit upload \
            ./test-results/playwright/results.xml \
            --service buildappswith \
            --env ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  coverage-report:
    name: Generate Coverage Report
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    
    env:
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
      DATADOG_SITE: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: test-results/
      
      - name: Process and upload coverage
        run: |
          node ./scripts/datadog/coverage-processor.js
          ./node_modules/.bin/datadog-ci junit upload \
            ./test-results/coverage/datadog-coverage.json \
            --service buildappswith \
            --type coverage \
            --env ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      
      - name: Generate Aggregate Coverage Report
        run: |
          pnpm test:report
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: test-results/coverage/
          retention-days: 30