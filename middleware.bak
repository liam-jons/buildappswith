/**
 * Combined Middleware for Buildappswith Platform
 * Version: 1.0.64
 * 
 * Implements global middleware for the Next.js application including:
 * - Authentication via Clerk
 * - API route protection with rate limiting
 * - CSRF protection for mutation operations
 * - Security headers for all responses
 */

import { NextFetchEvent, NextRequest, NextResponse } from 'next/server';
import { csrfProtection } from './lib/csrf';
import { rateLimit } from './lib/rate-limit';
import { authMiddleware, clerkClient, redirectToSignIn } from '@clerk/nextjs';
import { publicRoutes, ignoredRoutes } from './lib/auth/clerk-middleware';

// Define paths that require different rate limits
const apiPaths = {
  auth: /^\/api\/auth\/.*/,
  timeline: /^\/api\/timeline\/.*/,
  profiles: /^\/api\/builders\/.*/,
  marketplace: /^\/api\/marketplace\/.*/,
};

/**
 * Determine rate limit type based on the request path
 * @param pathname Request path
 * @returns Rate limit type
 */
function getRateLimitType(pathname: string) {
  if (apiPaths.auth.test(pathname)) return 'auth';
  if (apiPaths.timeline.test(pathname)) return 'timeline';
  if (apiPaths.profiles.test(pathname)) return 'profiles';
  if (apiPaths.marketplace.test(pathname)) return 'marketplace';
  return 'api'; // default
}

/**
 * Apply API protection middleware
 */
async function apiMiddleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // Skip CSRF check for authentication endpoints
  const skipCsrf = pathname.startsWith('/api/auth/') || pathname.startsWith('/api/webhooks/clerk');
  
  // Apply CSRF protection for non-GET methods
  if (!skipCsrf && !['GET', 'HEAD', 'OPTIONS', 'TRACE'].includes(request.method)) {
    const csrfResult = csrfProtection(request);
    // If CSRF validation fails, return the error response
    if (csrfResult) return csrfResult;
  }
  
  // Apply rate limiting based on the path
  const limiterType = getRateLimitType(pathname);
  const rateLimiter = rateLimit({ type: limiterType });
  
  // Execute rate limiter
  const rateLimitResult = await rateLimiter(request);
  if (rateLimitResult.status === 429) {
    return rateLimitResult;
  }
  
  // Add security headers, including Content Security Policy
  const response = NextResponse.next();
  
  // Add CSP headers for Clerk
  response.headers.append('Content-Security-Policy', `
    script-src 'self' clerk.buildappswith.com clerk.buildappswith.dev *.clerk.accounts.dev;
    frame-src 'self' clerk.buildappswith.com clerk.buildappswith.dev *.clerk.accounts.dev;
    img-src 'self' img.clerk.com images.clerk.dev data:;
    connect-src 'self' clerk.buildappswith.com clerk.buildappswith.dev *.clerk.accounts.dev;
  `);
  
  return response;
}

/**
 * Main middleware function combining Clerk auth and API protection
 */
export default authMiddleware({
  publicRoutes,
  ignoredRoutes,
  
  async afterAuth(auth, req, evt) {
    const { pathname } = req.nextUrl;
    
    // Handle API routes
    if (pathname.startsWith('/api/')) {
      // For protected API endpoints, verify authentication
      const isPublicApiRoute = publicRoutes.some(route => {
        if (typeof route === 'string') {
          return pathname.startsWith(route);
        }
        return route.test(pathname);
      });
      
      // If not authenticated and not a public API route, return unauthorized
      if (!auth.userId && !isPublicApiRoute) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      // Apply API protection middleware
      return apiMiddleware(req);
    }
    
    // Handle non-API routes
    
    // If the user is not authenticated and the route isn't public, redirect to sign-in
    if (!auth.userId && !auth.isPublicRoute) {
      return redirectToSignIn({ returnBackUrl: req.url });
    }

    // If the user is trying to access auth pages while logged in, redirect to dashboard
    if (auth.userId && (
      pathname.startsWith('/login') || 
      pathname.startsWith('/signup')
    )) {
      const dashboard = new URL('/dashboard', req.url);
      return NextResponse.redirect(dashboard);
    }

    // Allow all other requests to proceed
    return NextResponse.next();
  },
});

/**
 * Configure which paths middleware will run on
 */
export const config = {
  matcher: [
    '/((?!.+\\.[\\w]+$|_next).*)',
    '/',
    '/(api|trpc)(.*)',
  ],
};
