generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  imageUrl          String?
  roles             UserRole[]         @default([CLIENT])
  isFounder         Boolean            @default(false)
  stripeCustomerId  String?
  verified          Boolean            @default(false)
  clerkId           String?            @unique
  isDemo            Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  capabilities      AICapability[]
  accounts          Account[]
  bookingsAsClient  Booking[]          @relation("BookingsAsClient")
  builderProfile    BuilderProfile?
  clientProfile     ClientProfile?
  sessions          Session[]
  subscriberProfile SubscriberProfile?
  skillProgress     UserSkillProgress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BuilderProfile {
  id                String         @id @default(cuid())
  userId            String         @unique
  bio               String?
  headline          String?
  hourlyRate        Decimal?       @db.Decimal(10, 2)
  featuredBuilder   Boolean        @default(false)
  domains           String[]
  badges            String[]
  rating            Float?
  portfolioItems    Json[]
  validationTier    Int            @default(1)
  availableForHire  Boolean        @default(true)
  adhd_focus        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  socialLinks       Json?
  slug              String?        @unique
  tagline           String?
  displayName       String?
  completedProjects Int            @default(0)
  responseRate      Float?
  expertiseAreas    Json?
  featured          Boolean        @default(false)
  clerkUserId       String?        @unique
  searchable        Boolean        @default(true)
  availability      String         @default("available")
  topSkills         String[]       @default([])
  apps              App[]
  bookings          Booking[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            BuilderSkill[]
  sessionTypes      SessionType[]
  schedulingSettings Json? 
  availabilityRules AvailabilityRule[] 
  availabilityExceptions AvailabilityException[] 

  @@index([featured])
  @@index([searchable])
  @@index([availability])
  @@index([validationTier])
}

model ClientProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String?
  industry           String?
  projectPreferences Json?
  pathways           Json      @default("[]")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects           Project[]
}

model SubscriberProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique
  interests           String[]
  newsletterFrequency String    @default("weekly")
  subscriptionDate    DateTime  @default(now())
  lastEmailSent       DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model App {
  id           String         @id @default(cuid())
  title        String
  description  String
  imageUrl     String?
  technologies String[]
  status       AppStatus      @default(CONCEPT)
  appUrl       String?
  builderId    String
  adhd_focused Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  builder      BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

model Skill {
  id            String          @id @default(cuid())
  name          String
  slug          String          @unique
  description   String?
  domain        String
  level         Int
  prerequisites String[]
  status        SkillStatus     @default(ACTIVE)
  isFundamental Boolean         @default(false)
  pathways      String[]        @default([])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userSkills    BuilderSkill[]
  resources     SkillResource[]
  userProgress  UserSkillProgress[]
}

model BuilderSkill {
  id          String         @id @default(cuid())
  skillId     String
  builderId   String
  proficiency Int
  verified    Boolean        @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  builder     BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
  skill       Skill          @relation(fields: [skillId], references: [id])
}

model SkillResource {
  id           String       @id @default(cuid())
  skillId      String
  title        String
  description  String?
  resourceType ResourceType
  url          String?
  content      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  skill        Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Project {
  id           String             @id @default(cuid())
  title        String
  description  String
  clientId     String
  status       ProjectStatus      @default(DRAFT)
  budget       Decimal?           @db.Decimal(10, 2)
  startDate    DateTime?
  endDate      DateTime?
  requirements Json?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  client       ClientProfile      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones   ProjectMilestone[]
}

model ProjectMilestone {
  id           String    @id @default(cuid())
  projectId    String
  title        String
  description  String?
  dueDate      DateTime?
  completed    Boolean   @default(false)
  completedAt  DateTime?
  deliverables Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Booking {
  id                     String         @id @default(cuid())
  builderId              String
  clientId               String?
  sessionTypeId          String?
  title                  String
  description            String?
  startTime              DateTime
  endTime                DateTime
  status                 BookingStatus  @default(PENDING)
  paymentStatus          PaymentStatus  @default(UNPAID)
  amount                 Decimal?       @db.Decimal(10, 2)
  stripeSessionId        String?
  clientTimezone         String?
  builderTimezone        String?
  pathway                String?
  customQuestionResponse Json?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  calendlyEventId        String?
  calendlyEventUri       String?
  calendlyInviteeUri     String?
  builder                BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
  client                 User?          @relation("BookingsAsClient", fields: [clientId], references: [id], onDelete: Cascade)
  sessionType            SessionType?   @relation(fields: [sessionTypeId], references: [id])
}

model SessionType {
  id                   String         @id @default(cuid())
  builderId            String
  title                String
  description          String
  durationMinutes      Int
  price                Decimal        @db.Decimal(10, 2)
  currency             String
  isActive             Boolean        @default(true)
  color                String?
  maxParticipants      Int?
  requiresAuth         Boolean        @default(true)
  displayOrder         Int            @default(999)
  eventTypeCategory    String?
  timeZone             String?        
  isRecurring          Boolean?       @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  calendlyEventTypeId  String?
  calendlyEventTypeUri String?
  bookings             Booking[]
  builder              BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

model AICapability {
  id                    String                  @id @default(cuid())
  date                  DateTime
  title                 String
  description           String
  domain                String
  isModelImprovement    Boolean                 @default(false)
  modelName             String?
  source                String?
  verified              Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdById           String?
  createdBy             User?                   @relation(fields: [createdById], references: [id])
  examples              CapabilityExample[]
  limitations           CapabilityLimitation[]
  technicalRequirements CapabilityRequirement[]
}

model CapabilityExample {
  id             String       @id @default(cuid())
  capabilityId   String
  title          String
  description    String
  implementation String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  capability     AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityLimitation {
  id           String       @id @default(cuid())
  capabilityId String
  description  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  capability   AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityRequirement {
  id           String       @id @default(cuid())
  capabilityId String
  description  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  capability   AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model AvailabilityRule {
  id             String         @id @default(cuid())
  builderId      String
  dayOfWeek      Int // 0 for Sunday, 1 for Monday, ..., 6 for Saturday
  startTime      String // Format HH:MM (e.g., "09:00")
  endTime        String // Format HH:MM (e.g., "17:00")
  isRecurring    Boolean?       @default(true)
  effectiveDate  DateTime?      // For non-recurring rules or overrides
  expirationDate DateTime?      // For temporary rules
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  builder        BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)

  @@index([builderId, dayOfWeek])
}

model AvailabilityException {
  id             String         @id @default(cuid())
  builderId      String
  date           DateTime       @db.Date // Specific date of the exception
  isAvailable    Boolean        // True if the builder is available, false if unavailable
  slots          Json?          // Specific available/unavailable time slots, e.g., [{startTime: "10:00", endTime: "11:00", isBooked: false}]
  reason         String?        // Optional reason for the exception
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  builder        BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)

  @@index([builderId, date])
}

model UserSkillProgress {
  id             String            @id @default(cuid())
  userId         String
  skillId        String
  status         ProgressStatus    @default(NOT_STARTED)
  completedAt    DateTime?
  completedVia   CompletionMethod?
  validatedBy    String?
  pathway        String?
  notes          Json?
  attempts       Int               @default(0)
  lastAttemptAt  DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill          Skill             @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId, pathway])
  @@index([userId])
  @@index([skillId])
  @@index([status])
  @@index([pathway])
}

enum UserRole {
  CLIENT
  BUILDER
  ADMIN
  SUBSCRIBER
}

enum AppStatus {
  LIVE
  DEMO
  CONCEPT
}

enum SkillStatus {
  EMERGING
  ACTIVE
  DECLINING
  ARCHIVED
}

enum ResourceType {
  ARTICLE
  VIDEO
  EXERCISE
  PROJECT
  ASSESSMENT
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  CANCELLED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum CompletionMethod {
  ASSESSMENT
  BUILDER_VALIDATION
  AUTO
  MANUAL
}
