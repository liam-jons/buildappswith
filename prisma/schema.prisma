generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String? // Keep for backward compatibility
  imageUrl         String? // New field for Clerk integration
  isFounder        Boolean         @default(false)
  stripeCustomerId String?
  verified         Boolean         @default(false)
  clerkId          String?         @unique
  active           Boolean         @default(true)
  deletedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  roles            UserRole[]      @default([CLIENT])
  capabilities     AICapability[]
  accounts         Account[]
  bookingsAsClient Booking[]       @relation("BookingsAsClient")
  builderProfile   BuilderProfile?
  clientProfile    ClientProfile?
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BuilderProfile {
  id                String         @id @default(cuid())
  userId            String         @unique
  bio               String?        @db.Text
  headline          String?
  hourlyRate        Decimal?       @db.Decimal(10, 2)
  featuredBuilder   Boolean        @default(false)
  domains           String[]
  badges            String[]
  rating            Float?
  portfolioItems    Json[]
  validationTier    Int            @default(1)
  availableForHire  Boolean        @default(true)
  adhd_focus        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  socialLinks       Json?
  apps              App[]
  bookings          Booking[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            BuilderSkill[]
  sessionTypes      SessionType[]
  // Marketplace fields
  slug              String?        @unique
  tagline           String?
  displayName       String?
  completedProjects Int            @default(0)
  responseRate      Float?
  expertiseAreas    Json?
  featured          Boolean        @default(false)
  searchable        Boolean        @default(true)
  availability      String         @default("available")
  topSkills         String[]       @default([])

  @@index([featured])
  @@index([searchable])
  @@index([availability])
  @@index([validationTier])
}

model ClientProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String?
  industry           String?
  projectPreferences Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects           Project[]
}

model App {
  id           String         @id @default(cuid())
  title        String
  description  String         @db.Text
  imageUrl     String?
  technologies String[]
  status       AppStatus      @default(CONCEPT)
  appUrl       String?
  builderId    String
  adhd_focused Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  builder      BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

model Skill {
  id            String          @id @default(cuid())
  name          String
  slug          String          @unique
  description   String?         @db.Text
  domain        String
  level         Int
  prerequisites String[]
  status        SkillStatus     @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userSkills    BuilderSkill[]
  resources     SkillResource[]
}

model BuilderSkill {
  id          String         @id @default(cuid())
  skillId     String
  builderId   String
  proficiency Int
  verified    Boolean        @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  builder     BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
  skill       Skill          @relation(fields: [skillId], references: [id])
}

model SkillResource {
  id           String       @id @default(cuid())
  skillId      String
  title        String
  description  String?      @db.Text
  resourceType ResourceType
  url          String?
  content      String?      @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  skill        Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Project {
  id           String             @id @default(cuid())
  title        String
  description  String             @db.Text
  clientId     String
  status       ProjectStatus      @default(DRAFT)
  budget       Decimal?           @db.Decimal(10, 2)
  startDate    DateTime?
  endDate      DateTime?
  requirements Json?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  client       ClientProfile      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones   ProjectMilestone[]
}

model ProjectMilestone {
  id           String    @id @default(cuid())
  projectId    String
  title        String
  description  String?   @db.Text
  dueDate      DateTime?
  completed    Boolean   @default(false)
  completedAt  DateTime?
  deliverables Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Booking {
  id              String         @id @default(cuid())
  builderId       String
  clientId        String
  sessionTypeId   String?
  title           String
  description     String?        @db.Text
  startTime       DateTime
  endTime         DateTime
  status          BookingStatus  @default(PENDING)
  paymentStatus   PaymentStatus  @default(UNPAID)
  amount          Decimal?       @db.Decimal(10, 2)
  stripeSessionId String?
  clientTimezone  String?
  builderTimezone String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  builder         BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
  client          User           @relation("BookingsAsClient", fields: [clientId], references: [id], onDelete: Cascade)
  sessionType     SessionType?   @relation(fields: [sessionTypeId], references: [id])
}

model SessionType {
  id              String         @id @default(cuid())
  builderId       String
  title           String
  description     String         @db.Text
  durationMinutes Int
  price           Decimal        @db.Decimal(10, 2)
  currency        String
  isActive        Boolean        @default(true)
  color           String?
  maxParticipants Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  bookings        Booking[]
  builder         BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

model AICapability {
  id                    String                  @id @default(cuid())
  date                  DateTime
  title                 String
  description           String                  @db.Text
  domain                String
  isModelImprovement    Boolean                 @default(false)
  modelName             String?
  source                String?
  verified              Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdById           String?
  createdBy             User?                   @relation(fields: [createdById], references: [id])
  examples              CapabilityExample[]
  limitations           CapabilityLimitation[]
  technicalRequirements CapabilityRequirement[]
}

model CapabilityExample {
  id             String       @id @default(cuid())
  capabilityId   String
  title          String
  description    String       @db.Text
  implementation String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  capability     AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityLimitation {
  id           String       @id @default(cuid())
  capabilityId String
  description  String       @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  capability   AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityRequirement {
  id           String       @id @default(cuid())
  capabilityId String
  description  String       @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  capability   AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  id              String    @id @default(cuid())
  svixId          String    @unique
  type            String
  payload         Json
  processed       Boolean   @default(false)
  processingError String?
  processingCount Int       @default(0)
  lastProcessed   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([type])
  @@index([processed, processingCount]) // For retry queries
}

model WebhookMetric {
  id             String   @id @default(cuid())
  type           String
  status         String
  processingTime Float
  error          String?
  timestamp      DateTime @default(now())

  @@index([type])
  @@index([status])
  @@index([timestamp])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  targetId   String?
  targetType String?
  details    Json
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([targetType, targetId])
}

model Organization {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  name      String
  slug      String?   @unique
  imageUrl  String?
  active    Boolean   @default(true)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([slug])
}

enum UserRole {
  CLIENT
  BUILDER
  ADMIN
}

enum AppStatus {
  LIVE
  DEMO
  CONCEPT
}

enum SkillStatus {
  EMERGING
  ACTIVE
  DECLINING
  ARCHIVED
}

enum ResourceType {
  ARTICLE
  VIDEO
  EXERCISE
  PROJECT
  ASSESSMENT
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}
