// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// User and Authentication Models
// =========================================

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  roles           UserRole[] @default([CLIENT]) // Changed from single role to array
  isFounder       Boolean   @default(false)     // Flag for identifying founder status
  stripeCustomerId String?
  verified        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Auth-related fields
  accounts        Account[]
  sessions        Session[]

  // Role-specific relations
  builderProfile  BuilderProfile?
  clientProfile   ClientProfile?
  
  // Content related fields
  capabilities    AICapability[] // Created capabilities
  
  // Booking related fields
  bookingsAsClient Booking[]     @relation("BookingsAsClient")
}

enum UserRole {
  CLIENT
  BUILDER
  ADMIN
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =========================================
// Profile Models
// =========================================

model BuilderProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?  @db.Text
  headline         String?
  hourlyRate       Decimal? @db.Decimal(10, 2)
  featuredBuilder  Boolean  @default(false)
  domains          String[] // Array of expertise domains
  badges           String[] // Achievement badges
  rating           Float?   // Validation score
  portfolioItems   Json[]   // Array of portfolio items
  validationTier   Int      @default(1) // 1, 2, or 3 based on validation level
  availableForHire Boolean  @default(true)
  adhd_focus       Boolean  @default(false) // Special flag for ADHD specialization
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  socialLinks       Json?     // Social media links and contact information

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills           BuilderSkill[]
  bookings         Booking[]
  apps             App[]    // Relation to apps built by this builder
}

model ClientProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  companyName      String?
  industry         String?
  projectPreferences Json?   // Stored preferences for project matching
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects         Project[]
}

// App showcase model
model App {
  id               String    @id @default(cuid())
  title            String
  description      String    @db.Text
  imageUrl         String?
  technologies     String[]  // Array of technologies used
  status           AppStatus @default(CONCEPT)
  appUrl           String?   // URL to the deployed app
  builderId        String    // Reference to the builder who created it
  adhd_focused     Boolean   @default(false) // Whether app is focused on ADHD users
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  builder          BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

enum AppStatus {
  LIVE     // Fully deployed and functional
  DEMO     // Demo/prototype version available
  CONCEPT  // Conceptual mockup or design
}

// =========================================
// Skill Tree Models
// =========================================

model Skill {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?  @db.Text
  domain        String   // General domain category
  level         Int      // Difficulty/progression level
  prerequisites String[] // Array of skill IDs that are prerequisites
  status        SkillStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userSkills    BuilderSkill[]
  resources     SkillResource[]
}

enum SkillStatus {
  EMERGING  // New skills becoming important
  ACTIVE    // Currently relevant skills
  DECLINING // Skills becoming less relevant
  ARCHIVED  // Historical skills largely automated
}

model BuilderSkill {
  id            String   @id @default(cuid())
  skillId       String
  builderId     String
  proficiency   Int      // 1-5 rating of proficiency
  verified      Boolean  @default(false)
  verifiedBy    String?  // User ID who verified, if applicable
  verifiedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  skill         Skill          @relation(fields: [skillId], references: [id])
  builder       BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
}

model SkillResource {
  id            String   @id @default(cuid())
  skillId       String
  title         String
  description   String?  @db.Text
  resourceType  ResourceType
  url           String?
  content       String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

enum ResourceType {
  ARTICLE
  VIDEO
  EXERCISE
  PROJECT
  ASSESSMENT
}

// =========================================
// Marketplace Models
// =========================================

model Project {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  clientId      String
  status        ProjectStatus @default(DRAFT)
  budget        Decimal? @db.Decimal(10, 2)
  startDate     DateTime?
  endDate       DateTime?
  requirements  Json?    // Structured requirements data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  client        ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones    ProjectMilestone[]
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ProjectMilestone {
  id            String   @id @default(cuid())
  projectId     String
  title         String
  description   String?  @db.Text
  dueDate       DateTime?
  completed     Boolean  @default(false)
  completedAt   DateTime?
  deliverables  Json?    // Expected deliverables
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String   @id @default(cuid())
  builderId     String
  clientId      String   // Client who booked
  title         String
  description   String?  @db.Text
  startTime     DateTime
  endTime       DateTime
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  amount        Decimal? @db.Decimal(10, 2)
  stripeSessionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  builder       BuilderProfile @relation(fields: [builderId], references: [id], onDelete: Cascade)
  client        User           @relation("BookingsAsClient", fields: [clientId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

// =========================================
// Timeline Models
// =========================================

model AICapability {
  id                  String   @id @default(cuid())
  date                DateTime
  title               String
  description         String   @db.Text
  domain              String
  isModelImprovement  Boolean  @default(false)
  modelName           String?
  source              String?
  verified            Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdById         String?

  // Relations
  examples            CapabilityExample[]
  limitations         CapabilityLimitation[]
  technicalRequirements CapabilityRequirement[]
  createdBy           User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model CapabilityExample {
  id                  String   @id @default(cuid())
  capabilityId        String
  title               String
  description         String   @db.Text
  implementation      String?  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  capability          AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityLimitation {
  id                  String   @id @default(cuid())
  capabilityId        String
  description         String   @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  capability          AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}

model CapabilityRequirement {
  id                  String   @id @default(cuid())
  capabilityId        String
  description         String   @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  capability          AICapability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)
}